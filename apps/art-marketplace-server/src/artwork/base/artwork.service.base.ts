/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Artwork as PrismaArtwork } from "@prisma/client";

export class ArtworkServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.ArtworkCountArgs, "select">): Promise<number> {
    return this.prisma.artwork.count(args);
  }

  async artworks<T extends Prisma.ArtworkFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.ArtworkFindManyArgs>
  ): Promise<PrismaArtwork[]> {
    return this.prisma.artwork.findMany<Prisma.ArtworkFindManyArgs>(args);
  }
  async artwork<T extends Prisma.ArtworkFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ArtworkFindUniqueArgs>
  ): Promise<PrismaArtwork | null> {
    return this.prisma.artwork.findUnique(args);
  }
  async createArtwork<T extends Prisma.ArtworkCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ArtworkCreateArgs>
  ): Promise<PrismaArtwork> {
    return this.prisma.artwork.create<T>(args);
  }
  async updateArtwork<T extends Prisma.ArtworkUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ArtworkUpdateArgs>
  ): Promise<PrismaArtwork> {
    return this.prisma.artwork.update<T>(args);
  }
  async deleteArtwork<T extends Prisma.ArtworkDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.ArtworkDeleteArgs>
  ): Promise<PrismaArtwork> {
    return this.prisma.artwork.delete(args);
  }
}
