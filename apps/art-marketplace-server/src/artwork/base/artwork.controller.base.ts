/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ArtworkService } from "../artwork.service";
import { ArtworkCreateInput } from "./ArtworkCreateInput";
import { Artwork } from "./Artwork";
import { ArtworkFindManyArgs } from "./ArtworkFindManyArgs";
import { ArtworkWhereUniqueInput } from "./ArtworkWhereUniqueInput";
import { ArtworkUpdateInput } from "./ArtworkUpdateInput";

export class ArtworkControllerBase {
  constructor(protected readonly service: ArtworkService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Artwork })
  async createArtwork(
    @common.Body() data: ArtworkCreateInput
  ): Promise<Artwork> {
    return await this.service.createArtwork({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Artwork] })
  @ApiNestedQuery(ArtworkFindManyArgs)
  async artworks(@common.Req() request: Request): Promise<Artwork[]> {
    const args = plainToClass(ArtworkFindManyArgs, request.query);
    return this.service.artworks({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Artwork })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async artwork(
    @common.Param() params: ArtworkWhereUniqueInput
  ): Promise<Artwork | null> {
    const result = await this.service.artwork({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Artwork })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateArtwork(
    @common.Param() params: ArtworkWhereUniqueInput,
    @common.Body() data: ArtworkUpdateInput
  ): Promise<Artwork | null> {
    try {
      return await this.service.updateArtwork({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Artwork })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteArtwork(
    @common.Param() params: ArtworkWhereUniqueInput
  ): Promise<Artwork | null> {
    try {
      return await this.service.deleteArtwork({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
