/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ArtistProfileService } from "../artistProfile.service";
import { ArtistProfileCreateInput } from "./ArtistProfileCreateInput";
import { ArtistProfile } from "./ArtistProfile";
import { ArtistProfileFindManyArgs } from "./ArtistProfileFindManyArgs";
import { ArtistProfileWhereUniqueInput } from "./ArtistProfileWhereUniqueInput";
import { ArtistProfileUpdateInput } from "./ArtistProfileUpdateInput";

export class ArtistProfileControllerBase {
  constructor(protected readonly service: ArtistProfileService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ArtistProfile })
  async createArtistProfile(
    @common.Body() data: ArtistProfileCreateInput
  ): Promise<ArtistProfile> {
    return await this.service.createArtistProfile({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ArtistProfile] })
  @ApiNestedQuery(ArtistProfileFindManyArgs)
  async artistProfiles(
    @common.Req() request: Request
  ): Promise<ArtistProfile[]> {
    const args = plainToClass(ArtistProfileFindManyArgs, request.query);
    return this.service.artistProfiles({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ArtistProfile })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async artistProfile(
    @common.Param() params: ArtistProfileWhereUniqueInput
  ): Promise<ArtistProfile | null> {
    const result = await this.service.artistProfile({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ArtistProfile })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateArtistProfile(
    @common.Param() params: ArtistProfileWhereUniqueInput,
    @common.Body() data: ArtistProfileUpdateInput
  ): Promise<ArtistProfile | null> {
    try {
      return await this.service.updateArtistProfile({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ArtistProfile })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteArtistProfile(
    @common.Param() params: ArtistProfileWhereUniqueInput
  ): Promise<ArtistProfile | null> {
    try {
      return await this.service.deleteArtistProfile({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
