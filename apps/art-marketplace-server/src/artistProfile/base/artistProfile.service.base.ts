/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, ArtistProfile as PrismaArtistProfile } from "@prisma/client";

export class ArtistProfileServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ArtistProfileCountArgs, "select">
  ): Promise<number> {
    return this.prisma.artistProfile.count(args);
  }

  async artistProfiles<T extends Prisma.ArtistProfileFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.ArtistProfileFindManyArgs>
  ): Promise<PrismaArtistProfile[]> {
    return this.prisma.artistProfile.findMany<Prisma.ArtistProfileFindManyArgs>(
      args
    );
  }
  async artistProfile<T extends Prisma.ArtistProfileFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ArtistProfileFindUniqueArgs>
  ): Promise<PrismaArtistProfile | null> {
    return this.prisma.artistProfile.findUnique(args);
  }
  async createArtistProfile<T extends Prisma.ArtistProfileCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ArtistProfileCreateArgs>
  ): Promise<PrismaArtistProfile> {
    return this.prisma.artistProfile.create<T>(args);
  }
  async updateArtistProfile<T extends Prisma.ArtistProfileUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ArtistProfileUpdateArgs>
  ): Promise<PrismaArtistProfile> {
    return this.prisma.artistProfile.update<T>(args);
  }
  async deleteArtistProfile<T extends Prisma.ArtistProfileDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.ArtistProfileDeleteArgs>
  ): Promise<PrismaArtistProfile> {
    return this.prisma.artistProfile.delete(args);
  }
}
