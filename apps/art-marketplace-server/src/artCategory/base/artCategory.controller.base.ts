/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ArtCategoryService } from "../artCategory.service";
import { ArtCategoryCreateInput } from "./ArtCategoryCreateInput";
import { ArtCategory } from "./ArtCategory";
import { ArtCategoryFindManyArgs } from "./ArtCategoryFindManyArgs";
import { ArtCategoryWhereUniqueInput } from "./ArtCategoryWhereUniqueInput";
import { ArtCategoryUpdateInput } from "./ArtCategoryUpdateInput";

export class ArtCategoryControllerBase {
  constructor(protected readonly service: ArtCategoryService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ArtCategory })
  async createArtCategory(
    @common.Body() data: ArtCategoryCreateInput
  ): Promise<ArtCategory> {
    return await this.service.createArtCategory({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ArtCategory] })
  @ApiNestedQuery(ArtCategoryFindManyArgs)
  async artCategories(@common.Req() request: Request): Promise<ArtCategory[]> {
    const args = plainToClass(ArtCategoryFindManyArgs, request.query);
    return this.service.artCategories({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ArtCategory })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async artCategory(
    @common.Param() params: ArtCategoryWhereUniqueInput
  ): Promise<ArtCategory | null> {
    const result = await this.service.artCategory({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ArtCategory })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateArtCategory(
    @common.Param() params: ArtCategoryWhereUniqueInput,
    @common.Body() data: ArtCategoryUpdateInput
  ): Promise<ArtCategory | null> {
    try {
      return await this.service.updateArtCategory({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ArtCategory })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteArtCategory(
    @common.Param() params: ArtCategoryWhereUniqueInput
  ): Promise<ArtCategory | null> {
    try {
      return await this.service.deleteArtCategory({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
