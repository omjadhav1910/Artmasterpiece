/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, ArtCategory as PrismaArtCategory } from "@prisma/client";

export class ArtCategoryServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ArtCategoryCountArgs, "select">
  ): Promise<number> {
    return this.prisma.artCategory.count(args);
  }

  async artCategories<T extends Prisma.ArtCategoryFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.ArtCategoryFindManyArgs>
  ): Promise<PrismaArtCategory[]> {
    return this.prisma.artCategory.findMany<Prisma.ArtCategoryFindManyArgs>(
      args
    );
  }
  async artCategory<T extends Prisma.ArtCategoryFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ArtCategoryFindUniqueArgs>
  ): Promise<PrismaArtCategory | null> {
    return this.prisma.artCategory.findUnique(args);
  }
  async createArtCategory<T extends Prisma.ArtCategoryCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ArtCategoryCreateArgs>
  ): Promise<PrismaArtCategory> {
    return this.prisma.artCategory.create<T>(args);
  }
  async updateArtCategory<T extends Prisma.ArtCategoryUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ArtCategoryUpdateArgs>
  ): Promise<PrismaArtCategory> {
    return this.prisma.artCategory.update<T>(args);
  }
  async deleteArtCategory<T extends Prisma.ArtCategoryDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.ArtCategoryDeleteArgs>
  ): Promise<PrismaArtCategory> {
    return this.prisma.artCategory.delete(args);
  }
}
